import os
import sqlite3
import tkinter as tk
from tkinter import filedialog, messagebox

# Database setup
def create_database():
    conn = sqlite3.connect('file_titles.db')
    c = conn.cursor()
    
    # Check if the 'file_size' column exists, and if not, add it
    c.execute("PRAGMA table_info(files);")
    columns = [column[1] for column in c.fetchall()]
    if 'file_size' not in columns:
        c.execute('''ALTER TABLE files ADD COLUMN file_size INTEGER''')
    
    conn.commit()
    conn.close()

# Scan a given directory and add .mkv, .mp4, and .pdf files to the database, including file size
def scan_directory(directory):
    conn = sqlite3.connect('file_titles.db')
    c = conn.cursor()

    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith(('.mkv', '.mp4', '.pdf')):
                title = os.path.splitext(file)[0]  # Remove file extension for title
                file_type = 'Video' if file.endswith(('.mkv', '.mp4')) else 'PDF'
                file_path = os.path.join(root, file)
                try:
                    file_size = os.path.getsize(file_path)  # Get the file size

                    # Insert the file details into the database
                    c.execute("INSERT OR REPLACE INTO files (title, file_type, file_size) VALUES (?, ?, ?)",
                              (title, file_type, file_size))  # Ensure it updates if the file exists
                except Exception as e:
                    # If there's an error with getting the file size, log it
                    messagebox.showwarning("Error", f"Failed to get size for {file}: {str(e)}")

    conn.commit()
    conn.close()

# Search database for a title
def search_title(query):
    conn = sqlite3.connect('file_titles.db')
    c = conn.cursor()
    c.execute("SELECT title, file_type FROM files WHERE title LIKE ?", ('%' + query + '%',))
    results = c.fetchall()
    conn.close()
    return results

# Delete files from all subfolders in the selected folder that are in the database
# Ensures the file size matches before deletion
def delete_files_from_folder(folder):
    conn = sqlite3.connect('file_titles.db')
    c = conn.cursor()
    c.execute("SELECT title, file_type, file_size FROM files")
    files_in_db = c.fetchall()
    conn.close()

    deleted_files = []
    size_mismatch_files = []

    for title, file_type, file_size in files_in_db:
        if file_size is None:
            size_mismatch_files.append(f"File size is missing for {title}, skipping deletion.")
            continue  # Skip files with missing size

        # Check for .mkv, .mp4, or .pdf files in all subdirectories
        extensions = {'Video': ('.mkv', '.mp4'), 'PDF': ('.pdf',)}
        for ext in extensions.get(file_type, []):
            for root, _, files in os.walk(folder):  # Scan subfolders
                if title + ext in files:  # Check if the file is in the folder
                    file_path = os.path.join(root, title + ext)
                    try:
                        # Get the actual size of the file
                        actual_size = os.path.getsize(file_path)

                        # Check if the file size matches exactly
                        if actual_size == file_size:
                            os.remove(file_path)  # Delete the file
                            deleted_files.append(file_path)  # Add to deleted list
                        else:
                            size_mismatch_files.append(f"Size mismatch for {file_path}: "
                                                      f"Expected size = {file_size} bytes, "
                                                      f"Actual size = {actual_size} bytes")
                    except Exception as e:
                        size_mismatch_files.append(f"Failed to delete {file_path}: {str(e)}")

    # Display results for deleted files
    if deleted_files:
        messagebox.showinfo("Deleted Files", "\n".join(deleted_files))

    # Display results for size mismatch files
    if size_mismatch_files:
        messagebox.showinfo("Size Mismatch Files", "\n".join(size_mismatch_files))

    # If no files were deleted and no mismatches, show a message
    if not deleted_files and not size_mismatch_files:
        messagebox.showinfo("No Files Deleted", "No files from the database were found to delete.")

# Open directory to scan and add files to the database
def open_directory_to_scan():
    folder = filedialog.askdirectory()
    if folder:
        scan_directory(folder)
        messagebox.showinfo("Success", "Scanning completed and database updated.")

# Open directory to delete files based on the database
def open_directory_to_delete():
    folder = filedialog.askdirectory()
    if folder:
        delete_files_from_folder(folder)

# Perform a search query for a file title
def search():
    query = search_entry.get()
    if query:
        results = search_title(query)
        result_text.delete(1.0, tk.END)  # Clear previous results
        if results:
            for result in results:
                result_text.insert(tk.END, f"Title: {result[0]} (Type: {result[1]})\n")
        else:
            result_text.insert(tk.END, "No matching titles found.")
    else:
        messagebox.showwarning("Input Error", "Please enter a search query.")

# Main application setup
root = tk.Tk()
root.title("File Title Database")

# Buttons and Entry Widgets
open_scan_button = tk.Button(root, text="Select Folder to Scan", command=open_directory_to_scan)
open_scan_button.pack(pady=10)

open_delete_button = tk.Button(root, text="Select Folder to Delete Files", command=open_directory_to_delete)
open_delete_button.pack(pady=10)

search_label = tk.Label(root, text="Search for a file title:")
search_label.pack(pady=5)

search_entry = tk.Entry(root, width=40)
search_entry.pack(pady=5)

search_button = tk.Button(root, text="Search", command=search)
search_button.pack(pady=10)

result_text = tk.Text(root, height=10, width=40)
result_text.pack(pady=10)

# Start with database creation
create_database()

# Run the GUI
root.mainloop()
